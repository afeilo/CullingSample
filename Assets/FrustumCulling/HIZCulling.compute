// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
uint instanceCount;
float4 Planes[6];
StructuredBuffer<float4x4> localToWorldMatrixs;
AppendStructuredBuffer<float4x4> positionBuffer;
RWStructuredBuffer<uint> argsBuffer;


float4x4 matrix_VP;
Texture2D _HIZDepth;
SamplerState sampler_HIZDepth;


[numthreads(640,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    if (id.x >= instanceCount)
        return;
    float4x4 mat = localToWorldMatrixs[id.x];
    float3 position = float3(mat._m03, mat._m13, mat._m23);
    float4 clipPos = mul(matrix_VP, float4(position, 1));
    // for (int i = 0; i < 6; i++) {
    //     float4 plane = Planes[i];
    //     if ((dot(position, plane.xyz) + plane.w) < 0)
    //         return;
    // }
    
    
    //TODO HIZ剔除
    // 计算mipmap等级 log2(half_bounds / (tan(fov / 2) * z / half_width))
    // 根据mipmap等级去获取深度值
    
    //比较深度值
     float2 uv = clipPos.xy / clipPos.w;
     float z = clipPos.z / clipPos.w;
    if (uv.x <= -1 || uv.y <= -1 || uv.x >= 1 || uv.y >= 1 || z < 0)
         return;

    uv = (uv + 1) / 2;
    float4 color = _HIZDepth.SampleLevel(sampler_HIZDepth, uv, 0);
    if (color.r > z)
        return;
    positionBuffer.Append(mat);
    InterlockedAdd(argsBuffer[1], 1);
}
